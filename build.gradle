plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'net.researchgate.release' version '3.0.2'
}

wrapper {
    gradleVersion = '7.3.3'
}

String groupId = 'com.unblu.openapi'

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    group = groupId

    signing {
        useGpgCmd()
        sign(publishing.publications)
    }

    tasks.withType(Sign) {
        onlyIf {
            project.hasProperty('signing.gnupg.keyName')
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()

        compileJava.options.encoding = "UTF-8"
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    repositories {
        mavenCentral()
    }
}

nexusPublishing {
    packageGroup = 'com.unblu'
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            username = project.findProperty('s01ossSonatypeUsername') ?: ''
            password = project.findProperty('s01ossSonatypePassword') ?: ''
        }
    }
}

release {
    buildTasks = ['releaseBuild']
    git {
        requireBranch.set('main/6.x.x')
    }
}

task releaseBuild {
    dependsOn(
            'checkLastVersionValue',
            'initializeSonatypeStagingRepository', 
            'clean',
            'build',
            project.getTasksByName('publishToSonatype', true)
    )
}

tasks.register('checkLastVersionValue') {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        def newVersion = project.findProperty('release.releaseVersion') ?: version.replace('-SNAPSHOT', '')
        content = content.replaceAll("lastVersion=[0-9a-z\\.\\-]+", "lastVersion=" + newVersion)
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
}


package com.unblu.webapi.model.v4;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Model representing a file upload interceptor.
 */
@ApiModel(description = "Model representing a file upload interceptor.")

@JsonPropertyOrder({
	FileUploadInterceptorData.JSON_PROPERTY_$_TYPE,
	FileUploadInterceptorData.JSON_PROPERTY_ID,
	FileUploadInterceptorData.JSON_PROPERTY_CREATION_TIMESTAMP,
	FileUploadInterceptorData.JSON_PROPERTY_MODIFICATION_TIMESTAMP,
	FileUploadInterceptorData.JSON_PROPERTY_VERSION,
	FileUploadInterceptorData.JSON_PROPERTY_ACCOUNT_ID,
	FileUploadInterceptorData.JSON_PROPERTY_NAME,
	FileUploadInterceptorData.JSON_PROPERTY_DESCRIPTION,
	FileUploadInterceptorData.JSON_PROPERTY_ORDER,
	FileUploadInterceptorData.JSON_PROPERTY_MIME_TYPE_REGEX,
	FileUploadInterceptorData.JSON_PROPERTY_WEBHOOK_STATUS,
	FileUploadInterceptorData.JSON_PROPERTY_WEBHOOK_ENDPOINT,
	FileUploadInterceptorData.JSON_PROPERTY_WEBHOOK_API_VERSION,
	FileUploadInterceptorData.JSON_PROPERTY_WEBHOOK_SECRET,
})
@JsonAutoDetect(creatorVisibility = Visibility.NONE, fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)
public class FileUploadInterceptorData {
	/**
	 * Gets or Sets $type
	 */
	public enum TypeEnum {
		FILEUPLOADINTERCEPTORDATA("FileUploadInterceptorData");

		private String value;

		TypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TypeEnum fromValue(String value) {
			for (TypeEnum b : TypeEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			return TypeEnum.FILEUPLOADINTERCEPTORDATA;
		}
	}

	public static final String JSON_PROPERTY_$_TYPE = "$_type";
	@JsonProperty(JSON_PROPERTY_$_TYPE)
	private TypeEnum $type = TypeEnum.FILEUPLOADINTERCEPTORDATA;

	public static final String JSON_PROPERTY_ID = "id";
	@JsonProperty(JSON_PROPERTY_ID)
	private String id;

	public static final String JSON_PROPERTY_CREATION_TIMESTAMP = "creationTimestamp";
	@JsonProperty(JSON_PROPERTY_CREATION_TIMESTAMP)
	private Long creationTimestamp;

	public static final String JSON_PROPERTY_MODIFICATION_TIMESTAMP = "modificationTimestamp";
	@JsonProperty(JSON_PROPERTY_MODIFICATION_TIMESTAMP)
	private Long modificationTimestamp;

	public static final String JSON_PROPERTY_VERSION = "version";
	@JsonProperty(JSON_PROPERTY_VERSION)
	private Long version;

	public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
	@JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
	private String accountId;

	public static final String JSON_PROPERTY_NAME = "name";
	@JsonProperty(JSON_PROPERTY_NAME)
	private String name;

	public static final String JSON_PROPERTY_DESCRIPTION = "description";
	@JsonProperty(JSON_PROPERTY_DESCRIPTION)
	private String description;

	public static final String JSON_PROPERTY_ORDER = "order";
	@JsonProperty(JSON_PROPERTY_ORDER)
	private Long order;

	public static final String JSON_PROPERTY_MIME_TYPE_REGEX = "mimeTypeRegex";
	@JsonProperty(JSON_PROPERTY_MIME_TYPE_REGEX)
	private String mimeTypeRegex;

	public static final String JSON_PROPERTY_WEBHOOK_STATUS = "webhookStatus";
	@JsonProperty(JSON_PROPERTY_WEBHOOK_STATUS)
	private ERegistrationStatus webhookStatus;

	public static final String JSON_PROPERTY_WEBHOOK_ENDPOINT = "webhookEndpoint";
	@JsonProperty(JSON_PROPERTY_WEBHOOK_ENDPOINT)
	private String webhookEndpoint;

	public static final String JSON_PROPERTY_WEBHOOK_API_VERSION = "webhookApiVersion";
	@JsonProperty(JSON_PROPERTY_WEBHOOK_API_VERSION)
	private EWebApiVersion webhookApiVersion;

	public static final String JSON_PROPERTY_WEBHOOK_SECRET = "webhookSecret";
	@JsonProperty(JSON_PROPERTY_WEBHOOK_SECRET)
	private String webhookSecret;

	public FileUploadInterceptorData $type(TypeEnum $type) {
		this.$type = $type;
		return this;
	}

	/**
	 * Get $type
	 * 
	 * @return $type
	 **/
	@ApiModelProperty(value = "")
	public TypeEnum get$Type() {
		return $type;
	}

	public void set$Type(TypeEnum $type) {
		this.$type = $type;
	}

	public FileUploadInterceptorData id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * Unique ID of the entity. When creating an entity, this property can be omitted; it&#39;s generated by the server.
	 * 
	 * @return id
	 **/
	@ApiModelProperty(value = "Unique ID of the entity. When creating an entity, this property can be omitted; it's generated by the server.")
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public FileUploadInterceptorData creationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
		return this;
	}

	/**
	 * Creation timestamp of the entity. It is defined when the entity is first stored in Unblu. Any value sent to the Unblu server is ignored, so it can be
	 * omitted. Note: If you set this property, Unblu returns the same value, but it isn&#39;t written to storage and doesn&#39;t affect data consistency.
	 * 
	 * @return creationTimestamp
	 **/
	@ApiModelProperty(value = "Creation timestamp of the entity. It is defined when the entity is first stored in Unblu. Any value sent to the Unblu server is ignored, so it can be omitted. Note: If you set this property, Unblu returns the same value, but it isn't written to storage and doesn't affect data consistency.")
	public Long getCreationTimestamp() {
		return creationTimestamp;
	}

	public void setCreationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
	}

	public FileUploadInterceptorData modificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
		return this;
	}

	/**
	 * Timestamp of the last modification. This property is always optional and can be omitted when sending data to the server. If sent to the server, it is
	 * ignored. It is only informational in character. Note: If you set this property, it returns the same value but it isn&#39;t written to storage and doesn&#39;t
	 * affect the data consistency.
	 * 
	 * @return modificationTimestamp
	 **/
	@ApiModelProperty(value = "Timestamp of the last modification. This property is always optional and can be omitted when sending data to the server. If sent to the server, it is ignored. It is only informational in character. Note: If you set this property, it returns the same value but it isn't written to storage and doesn't affect the data consistency.")
	public Long getModificationTimestamp() {
		return modificationTimestamp;
	}

	public void setModificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
	}

	public FileUploadInterceptorData version(Long version) {
		this.version = version;
		return this;
	}

	/**
	 * Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When
	 * creating an object, the version can be omitted.
	 * 
	 * @return version
	 **/
	@ApiModelProperty(value = "Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When creating an object, the version can be omitted.")
	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public FileUploadInterceptorData accountId(String accountId) {
		this.accountId = accountId;
		return this;
	}

	/**
	 * ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the
	 * user currently logged in. When editing an entity, you must include the account ID.
	 * 
	 * @return accountId
	 **/
	@ApiModelProperty(value = "ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the user currently logged in. When editing an entity, you must include the account ID.")
	public String getAccountId() {
		return accountId;
	}

	public void setAccountId(String accountId) {
		this.accountId = accountId;
	}

	public FileUploadInterceptorData name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Name of the file upload interceptor. Maximum length of 250 characters. Mandatory.
	 * 
	 * @return name
	 **/
	@ApiModelProperty(value = "Name of the file upload interceptor. Maximum length of 250 characters. Mandatory.")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public FileUploadInterceptorData description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Description of the file upload interceptor. Maximum length of 500 characters. Optional.
	 * 
	 * @return description
	 **/
	@ApiModelProperty(value = "Description of the file upload interceptor. Maximum length of 500 characters. Optional.")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public FileUploadInterceptorData order(Long order) {
		this.order = order;
		return this;
	}

	/**
	 * Order of execution of the file upload interceptor among all the file upload interceptors configured in the account. Mandatory.
	 * 
	 * @return order
	 **/
	@ApiModelProperty(value = "Order of execution of the file upload interceptor among all the file upload interceptors configured in the account. Mandatory.")
	public Long getOrder() {
		return order;
	}

	public void setOrder(Long order) {
		this.order = order;
	}

	public FileUploadInterceptorData mimeTypeRegex(String mimeTypeRegex) {
		this.mimeTypeRegex = mimeTypeRegex;
		return this;
	}

	/**
	 * Regular expression used to determine if the interceptor must be used for a particular MIME type. Leave it empty to match all MIME types.
	 * 
	 * @return mimeTypeRegex
	 **/
	@ApiModelProperty(value = "Regular expression used to determine if the interceptor must be used for a particular MIME type. Leave it empty to match all MIME types.")
	public String getMimeTypeRegex() {
		return mimeTypeRegex;
	}

	public void setMimeTypeRegex(String mimeTypeRegex) {
		this.mimeTypeRegex = mimeTypeRegex;
	}

	public FileUploadInterceptorData webhookStatus(ERegistrationStatus webhookStatus) {
		this.webhookStatus = webhookStatus;
		return this;
	}

	/**
	 * Get webhookStatus
	 * 
	 * @return webhookStatus
	 **/
	@ApiModelProperty(value = "")
	public ERegistrationStatus getWebhookStatus() {
		return webhookStatus;
	}

	public void setWebhookStatus(ERegistrationStatus webhookStatus) {
		this.webhookStatus = webhookStatus;
	}

	public FileUploadInterceptorData webhookEndpoint(String webhookEndpoint) {
		this.webhookEndpoint = webhookEndpoint;
		return this;
	}

	/**
	 * The URL of the webhook registration endpoint. Requests for webhook events are sent to this URL. Maximum length of 4000 characters. &lt;p&gt; The following
	 * event is sent to the endpoint: &lt;ul&gt; &lt;li&gt;&#x60;TypedEvent.FILE_UPLOAD_INTERCEPTOR_NEW_FILE&#x60;: On each file uploaded to a
	 * conversation.&lt;/li&gt; &lt;/ul&gt;
	 * 
	 * @return webhookEndpoint
	 **/
	@ApiModelProperty(value = "The URL of the webhook registration endpoint. Requests for webhook events are sent to this URL. Maximum length of 4000 characters. <p> The following event is sent to the endpoint: <ul> <li>`TypedEvent.FILE_UPLOAD_INTERCEPTOR_NEW_FILE`: On each file uploaded to a conversation.</li> </ul>")
	public String getWebhookEndpoint() {
		return webhookEndpoint;
	}

	public void setWebhookEndpoint(String webhookEndpoint) {
		this.webhookEndpoint = webhookEndpoint;
	}

	public FileUploadInterceptorData webhookApiVersion(EWebApiVersion webhookApiVersion) {
		this.webhookApiVersion = webhookApiVersion;
		return this;
	}

	/**
	 * Get webhookApiVersion
	 * 
	 * @return webhookApiVersion
	 **/
	@ApiModelProperty(value = "")
	public EWebApiVersion getWebhookApiVersion() {
		return webhookApiVersion;
	}

	public void setWebhookApiVersion(EWebApiVersion webhookApiVersion) {
		this.webhookApiVersion = webhookApiVersion;
	}

	public FileUploadInterceptorData webhookSecret(String webhookSecret) {
		this.webhookSecret = webhookSecret;
		return this;
	}

	/**
	 * Optional secret sent with each webhook event. Maximum length of 4000 characters.
	 * 
	 * @return webhookSecret
	 **/
	@ApiModelProperty(value = "Optional secret sent with each webhook event. Maximum length of 4000 characters.")
	public String getWebhookSecret() {
		return webhookSecret;
	}

	public void setWebhookSecret(String webhookSecret) {
		this.webhookSecret = webhookSecret;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		FileUploadInterceptorData fileUploadInterceptorData = (FileUploadInterceptorData) o;
		return Objects.equals(this.$type, fileUploadInterceptorData.$type) &&
				Objects.equals(this.id, fileUploadInterceptorData.id) &&
				Objects.equals(this.creationTimestamp, fileUploadInterceptorData.creationTimestamp) &&
				Objects.equals(this.modificationTimestamp, fileUploadInterceptorData.modificationTimestamp) &&
				Objects.equals(this.version, fileUploadInterceptorData.version) &&
				Objects.equals(this.accountId, fileUploadInterceptorData.accountId) &&
				Objects.equals(this.name, fileUploadInterceptorData.name) &&
				Objects.equals(this.description, fileUploadInterceptorData.description) &&
				Objects.equals(this.order, fileUploadInterceptorData.order) &&
				Objects.equals(this.mimeTypeRegex, fileUploadInterceptorData.mimeTypeRegex) &&
				Objects.equals(this.webhookStatus, fileUploadInterceptorData.webhookStatus) &&
				Objects.equals(this.webhookEndpoint, fileUploadInterceptorData.webhookEndpoint) &&
				Objects.equals(this.webhookApiVersion, fileUploadInterceptorData.webhookApiVersion) &&
				Objects.equals(this.webhookSecret, fileUploadInterceptorData.webhookSecret);
	}

	@Override
	public int hashCode() {
		return Objects.hash($type, id, creationTimestamp, modificationTimestamp, version, accountId, name, description, order, mimeTypeRegex, webhookStatus, webhookEndpoint, webhookApiVersion, webhookSecret);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class FileUploadInterceptorData {\n");
		sb.append("    $type: ").append(toIndentedString($type)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
		sb.append("    modificationTimestamp: ").append(toIndentedString(modificationTimestamp)).append("\n");
		sb.append("    version: ").append(toIndentedString(version)).append("\n");
		sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    order: ").append(toIndentedString(order)).append("\n");
		sb.append("    mimeTypeRegex: ").append(toIndentedString(mimeTypeRegex)).append("\n");
		sb.append("    webhookStatus: ").append(toIndentedString(webhookStatus)).append("\n");
		sb.append("    webhookEndpoint: ").append(toIndentedString(webhookEndpoint)).append("\n");
		sb.append("    webhookApiVersion: ").append(toIndentedString(webhookApiVersion)).append("\n");
		sb.append("    webhookSecret: ").append(toIndentedString(webhookSecret)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}

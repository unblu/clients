
package com.unblu.webapi.model.v4;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Model of a deputy relation ship.&lt;br&gt; It is a link between one agent and an deputy agent or team
 */
@ApiModel(description = "Model of a deputy relation ship.<br> It is a link between one agent and an deputy agent or team")

@JsonPropertyOrder({
	DeputyRelationship.JSON_PROPERTY_$_TYPE,
	DeputyRelationship.JSON_PROPERTY_ID,
	DeputyRelationship.JSON_PROPERTY_CREATION_TIMESTAMP,
	DeputyRelationship.JSON_PROPERTY_MODIFICATION_TIMESTAMP,
	DeputyRelationship.JSON_PROPERTY_VERSION,
	DeputyRelationship.JSON_PROPERTY_ACCOUNT_ID,
	DeputyRelationship.JSON_PROPERTY_AGENT_USER_ID,
	DeputyRelationship.JSON_PROPERTY_DEPUTY_TYPE,
	DeputyRelationship.JSON_PROPERTY_DEPUTY_ID,
	DeputyRelationship.JSON_PROPERTY_ESCALATION_LEVEL,
})
@JsonAutoDetect(creatorVisibility = Visibility.NONE, fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)
public class DeputyRelationship {
	/**
	 * Gets or Sets $type
	 */
	public enum TypeEnum {
		DEPUTYRELATIONSHIP("DeputyRelationship");

		private String value;

		TypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TypeEnum fromValue(String value) {
			for (TypeEnum b : TypeEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			return TypeEnum.DEPUTYRELATIONSHIP;
		}
	}

	public static final String JSON_PROPERTY_$_TYPE = "$_type";
	@JsonProperty(JSON_PROPERTY_$_TYPE)
	private TypeEnum $type = TypeEnum.DEPUTYRELATIONSHIP;

	public static final String JSON_PROPERTY_ID = "id";
	@JsonProperty(JSON_PROPERTY_ID)
	private String id;

	public static final String JSON_PROPERTY_CREATION_TIMESTAMP = "creationTimestamp";
	@JsonProperty(JSON_PROPERTY_CREATION_TIMESTAMP)
	private Long creationTimestamp;

	public static final String JSON_PROPERTY_MODIFICATION_TIMESTAMP = "modificationTimestamp";
	@JsonProperty(JSON_PROPERTY_MODIFICATION_TIMESTAMP)
	private Long modificationTimestamp;

	public static final String JSON_PROPERTY_VERSION = "version";
	@JsonProperty(JSON_PROPERTY_VERSION)
	private Long version;

	public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
	@JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
	private String accountId;

	public static final String JSON_PROPERTY_AGENT_USER_ID = "agentUserId";
	@JsonProperty(JSON_PROPERTY_AGENT_USER_ID)
	private String agentUserId;

	public static final String JSON_PROPERTY_DEPUTY_TYPE = "deputyType";
	@JsonProperty(JSON_PROPERTY_DEPUTY_TYPE)
	private EDeputyType deputyType;

	public static final String JSON_PROPERTY_DEPUTY_ID = "deputyId";
	@JsonProperty(JSON_PROPERTY_DEPUTY_ID)
	private String deputyId;

	public static final String JSON_PROPERTY_ESCALATION_LEVEL = "escalationLevel";
	@JsonProperty(JSON_PROPERTY_ESCALATION_LEVEL)
	private EDeputyDelegationEscalationLevel escalationLevel;

	public DeputyRelationship $type(TypeEnum $type) {
		this.$type = $type;
		return this;
	}

	/**
	 * Get $type
	 * 
	 * @return $type
	 **/
	@ApiModelProperty(value = "")
	public TypeEnum get$Type() {
		return $type;
	}

	public void set$Type(TypeEnum $type) {
		this.$type = $type;
	}

	public DeputyRelationship id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * Unique ID of the entity. When creating an entity, this property can be omitted; it&#39;s generated by the server.
	 * 
	 * @return id
	 **/
	@ApiModelProperty(value = "Unique ID of the entity. When creating an entity, this property can be omitted; it's generated by the server.")
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public DeputyRelationship creationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
		return this;
	}

	/**
	 * Creation timestamp of the entity. It is defined when the entity is first stored in Unblu. Any value sent to the Unblu server is ignored, so it can be
	 * omitted. Note: If you set this property, Unblu returns the same value, but it isn&#39;t written to storage and doesn&#39;t affect data consistency.
	 * 
	 * @return creationTimestamp
	 **/
	@ApiModelProperty(value = "Creation timestamp of the entity. It is defined when the entity is first stored in Unblu. Any value sent to the Unblu server is ignored, so it can be omitted. Note: If you set this property, Unblu returns the same value, but it isn't written to storage and doesn't affect data consistency.")
	public Long getCreationTimestamp() {
		return creationTimestamp;
	}

	public void setCreationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
	}

	public DeputyRelationship modificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
		return this;
	}

	/**
	 * Timestamp of the last modification. This property is always optional and can be omitted when sending data to the server. If sent to the server, it is
	 * ignored. It is only informational in character. Note: If you set this property, it returns the same value but it isn&#39;t written to storage and doesn&#39;t
	 * affect the data consistency.
	 * 
	 * @return modificationTimestamp
	 **/
	@ApiModelProperty(value = "Timestamp of the last modification. This property is always optional and can be omitted when sending data to the server. If sent to the server, it is ignored. It is only informational in character. Note: If you set this property, it returns the same value but it isn't written to storage and doesn't affect the data consistency.")
	public Long getModificationTimestamp() {
		return modificationTimestamp;
	}

	public void setModificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
	}

	public DeputyRelationship version(Long version) {
		this.version = version;
		return this;
	}

	/**
	 * Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When
	 * creating an object, the version can be omitted.
	 * 
	 * @return version
	 **/
	@ApiModelProperty(value = "Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When creating an object, the version can be omitted.")
	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public DeputyRelationship accountId(String accountId) {
		this.accountId = accountId;
		return this;
	}

	/**
	 * ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the
	 * user currently logged in. When editing an entity, you must include the account ID.
	 * 
	 * @return accountId
	 **/
	@ApiModelProperty(value = "ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the user currently logged in. When editing an entity, you must include the account ID.")
	public String getAccountId() {
		return accountId;
	}

	public void setAccountId(String accountId) {
		this.accountId = accountId;
	}

	public DeputyRelationship agentUserId(String agentUserId) {
		this.agentUserId = agentUserId;
		return this;
	}

	/**
	 * The agent user id to which the defined deputy belongs to
	 * 
	 * @return agentUserId
	 **/
	@ApiModelProperty(value = "The agent user id to which the defined deputy belongs to")
	public String getAgentUserId() {
		return agentUserId;
	}

	public void setAgentUserId(String agentUserId) {
		this.agentUserId = agentUserId;
	}

	public DeputyRelationship deputyType(EDeputyType deputyType) {
		this.deputyType = deputyType;
		return this;
	}

	/**
	 * Get deputyType
	 * 
	 * @return deputyType
	 **/
	@ApiModelProperty(value = "")
	public EDeputyType getDeputyType() {
		return deputyType;
	}

	public void setDeputyType(EDeputyType deputyType) {
		this.deputyType = deputyType;
	}

	public DeputyRelationship deputyId(String deputyId) {
		this.deputyId = deputyId;
		return this;
	}

	/**
	 * The id of the user or team which is the deputy of the defined agent user
	 * 
	 * @return deputyId
	 **/
	@ApiModelProperty(value = "The id of the user or team which is the deputy of the defined agent user")
	public String getDeputyId() {
		return deputyId;
	}

	public void setDeputyId(String deputyId) {
		this.deputyId = deputyId;
	}

	public DeputyRelationship escalationLevel(EDeputyDelegationEscalationLevel escalationLevel) {
		this.escalationLevel = escalationLevel;
		return this;
	}

	/**
	 * Get escalationLevel
	 * 
	 * @return escalationLevel
	 **/
	@ApiModelProperty(value = "")
	public EDeputyDelegationEscalationLevel getEscalationLevel() {
		return escalationLevel;
	}

	public void setEscalationLevel(EDeputyDelegationEscalationLevel escalationLevel) {
		this.escalationLevel = escalationLevel;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		DeputyRelationship deputyRelationship = (DeputyRelationship) o;
		return Objects.equals(this.$type, deputyRelationship.$type) &&
				Objects.equals(this.id, deputyRelationship.id) &&
				Objects.equals(this.creationTimestamp, deputyRelationship.creationTimestamp) &&
				Objects.equals(this.modificationTimestamp, deputyRelationship.modificationTimestamp) &&
				Objects.equals(this.version, deputyRelationship.version) &&
				Objects.equals(this.accountId, deputyRelationship.accountId) &&
				Objects.equals(this.agentUserId, deputyRelationship.agentUserId) &&
				Objects.equals(this.deputyType, deputyRelationship.deputyType) &&
				Objects.equals(this.deputyId, deputyRelationship.deputyId) &&
				Objects.equals(this.escalationLevel, deputyRelationship.escalationLevel);
	}

	@Override
	public int hashCode() {
		return Objects.hash($type, id, creationTimestamp, modificationTimestamp, version, accountId, agentUserId, deputyType, deputyId, escalationLevel);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class DeputyRelationship {\n");
		sb.append("    $type: ").append(toIndentedString($type)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
		sb.append("    modificationTimestamp: ").append(toIndentedString(modificationTimestamp)).append("\n");
		sb.append("    version: ").append(toIndentedString(version)).append("\n");
		sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
		sb.append("    agentUserId: ").append(toIndentedString(agentUserId)).append("\n");
		sb.append("    deputyType: ").append(toIndentedString(deputyType)).append("\n");
		sb.append("    deputyId: ").append(toIndentedString(deputyId)).append("\n");
		sb.append("    escalationLevel: ").append(toIndentedString(escalationLevel)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}


package com.unblu.webapi.model.v3;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModelProperty;

/**
 * Placeholder
 */

@JsonPropertyOrder({
	Placeholder.JSON_PROPERTY_$_TYPE,
	Placeholder.JSON_PROPERTY_ID,
	Placeholder.JSON_PROPERTY_CREATION_TIMESTAMP,
	Placeholder.JSON_PROPERTY_MODIFICATION_TIMESTAMP,
	Placeholder.JSON_PROPERTY_VERSION,
	Placeholder.JSON_PROPERTY_ACCOUNT_ID,
	Placeholder.JSON_PROPERTY_PLACEHOLDER_VALUES,
	Placeholder.JSON_PROPERTY_CANNED_RESPONSE_ID,
	Placeholder.JSON_PROPERTY_TYPE,
	Placeholder.JSON_PROPERTY_TITLE,
	Placeholder.JSON_PROPERTY_HINT,
})
@JsonAutoDetect(creatorVisibility = Visibility.NONE, fieldVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)
public class Placeholder {
	/**
	 * Gets or Sets $type
	 */
	public enum TypeEnum {
		PLACEHOLDER("Placeholder");

		private String value;

		TypeEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static TypeEnum fromValue(String value) {
			for (TypeEnum b : TypeEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			return TypeEnum.PLACEHOLDER;
		}
	}

	public static final String JSON_PROPERTY_$_TYPE = "$_type";
	@JsonProperty(JSON_PROPERTY_$_TYPE)
	private TypeEnum $type = TypeEnum.PLACEHOLDER;

	public static final String JSON_PROPERTY_ID = "id";
	@JsonProperty(JSON_PROPERTY_ID)
	private String id;

	public static final String JSON_PROPERTY_CREATION_TIMESTAMP = "creationTimestamp";
	@JsonProperty(JSON_PROPERTY_CREATION_TIMESTAMP)
	private Long creationTimestamp;

	public static final String JSON_PROPERTY_MODIFICATION_TIMESTAMP = "modificationTimestamp";
	@JsonProperty(JSON_PROPERTY_MODIFICATION_TIMESTAMP)
	private Long modificationTimestamp;

	public static final String JSON_PROPERTY_VERSION = "version";
	@JsonProperty(JSON_PROPERTY_VERSION)
	private Long version;

	public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
	@JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
	private String accountId;

	public static final String JSON_PROPERTY_PLACEHOLDER_VALUES = "placeholderValues";
	@JsonProperty(JSON_PROPERTY_PLACEHOLDER_VALUES)
	private List<PlaceholderValue> placeholderValues = null;

	public static final String JSON_PROPERTY_CANNED_RESPONSE_ID = "cannedResponseId";
	@JsonProperty(JSON_PROPERTY_CANNED_RESPONSE_ID)
	private String cannedResponseId;

	public static final String JSON_PROPERTY_TYPE = "type";
	@JsonProperty(JSON_PROPERTY_TYPE)
	private EPlaceholderType type;

	public static final String JSON_PROPERTY_TITLE = "title";
	@JsonProperty(JSON_PROPERTY_TITLE)
	private String title;

	public static final String JSON_PROPERTY_HINT = "hint";
	@JsonProperty(JSON_PROPERTY_HINT)
	private String hint;

	public Placeholder $type(TypeEnum $type) {
		this.$type = $type;
		return this;
	}

	/**
	 * Get $type
	 * 
	 * @return $type
	 **/
	@ApiModelProperty(value = "")
	public TypeEnum get$Type() {
		return $type;
	}

	public void set$Type(TypeEnum $type) {
		this.$type = $type;
	}

	public Placeholder id(String id) {
		this.id = id;
		return this;
	}

	/**
	 * Unique id of the entity. When creating an entity this property can be omitted as it will be generated by the server anyway.
	 * 
	 * @return id
	 **/
	@ApiModelProperty(value = "Unique id of the entity. When creating an entity this property can be omitted as it will be generated by the server anyway.")
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Placeholder creationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
		return this;
	}

	/**
	 * Creation timestamp of the entity. It is defined when the entity is stored the first time in the system. It is ignored, when sending it to the server and
	 * therefore can be omitted. Note: If you set this property it will return the same value but it will not be written to the storage and will not effect the data
	 * consistency.
	 * 
	 * @return creationTimestamp
	 **/
	@ApiModelProperty(value = "Creation timestamp of the entity. It is defined when the entity is stored the first time in the system. It is ignored, when sending it to the server and therefore can be omitted. Note: If you set this property it will return the same value but it will not be written to the storage and will not effect the data consistency.")
	public Long getCreationTimestamp() {
		return creationTimestamp;
	}

	public void setCreationTimestamp(Long creationTimestamp) {
		this.creationTimestamp = creationTimestamp;
	}

	public Placeholder modificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
		return this;
	}

	/**
	 * Timestamp of the last modification. This property is always optional and can be omitted, when sending data to the server. It is only of informational
	 * character. It is ignored, when sending it to the server and therefore can be omitted. Note: If you set this property it will return the same value but it
	 * will not be written to the storage and will not effect the data consistency.
	 * 
	 * @return modificationTimestamp
	 **/
	@ApiModelProperty(value = "Timestamp of the last modification. This property is always optional and can be omitted, when sending data to the server. It is only of informational character. It is ignored, when sending it to the server and therefore can be omitted. Note: If you set this property it will return the same value but it will not be written to the storage and will not effect the data consistency.")
	public Long getModificationTimestamp() {
		return modificationTimestamp;
	}

	public void setModificationTimestamp(Long modificationTimestamp) {
		this.modificationTimestamp = modificationTimestamp;
	}

	public Placeholder version(Long version) {
		this.version = version;
		return this;
	}

	/**
	 * Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When
	 * creating an object, the version can be omitted.
	 * 
	 * @return version
	 **/
	@ApiModelProperty(value = "Version of the entity. Will be incremented on each change. New updates must always be based on the newest version, if not updates will be rejected. When creating an object, the version can be omitted.")
	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public Placeholder accountId(String accountId) {
		this.accountId = accountId;
		return this;
	}

	/**
	 * ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the
	 * user currently logged in. When editing an entity, you must include the account ID.
	 * 
	 * @return accountId
	 **/
	@ApiModelProperty(value = "ID of the account the entity belongs to. When creating an entity, the account ID can be omitted. It will be filled by the server with the account ID of the user currently logged in. When editing an entity, you must include the account ID.")
	public String getAccountId() {
		return accountId;
	}

	public void setAccountId(String accountId) {
		this.accountId = accountId;
	}

	public Placeholder placeholderValues(List<PlaceholderValue> placeholderValues) {
		this.placeholderValues = placeholderValues;
		return this;
	}

	public Placeholder addPlaceholderValuesItem(PlaceholderValue placeholderValuesItem) {
		if (this.placeholderValues == null) {
			this.placeholderValues = new ArrayList<>();
		}
		this.placeholderValues.add(placeholderValuesItem);
		return this;
	}

	/**
	 * Get placeholderValues
	 * 
	 * @return placeholderValues
	 **/
	@ApiModelProperty(value = "")
	public List<PlaceholderValue> getPlaceholderValues() {
		return placeholderValues;
	}

	public void setPlaceholderValues(List<PlaceholderValue> placeholderValues) {
		this.placeholderValues = placeholderValues;
	}

	public Placeholder cannedResponseId(String cannedResponseId) {
		this.cannedResponseId = cannedResponseId;
		return this;
	}

	/**
	 * Get cannedResponseId
	 * 
	 * @return cannedResponseId
	 **/
	@ApiModelProperty(value = "")
	public String getCannedResponseId() {
		return cannedResponseId;
	}

	public void setCannedResponseId(String cannedResponseId) {
		this.cannedResponseId = cannedResponseId;
	}

	public Placeholder type(EPlaceholderType type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 * 
	 * @return type
	 **/
	@ApiModelProperty(value = "")
	public EPlaceholderType getType() {
		return type;
	}

	public void setType(EPlaceholderType type) {
		this.type = type;
	}

	public Placeholder title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 * 
	 * @return title
	 **/
	@ApiModelProperty(value = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public Placeholder hint(String hint) {
		this.hint = hint;
		return this;
	}

	/**
	 * Get hint
	 * 
	 * @return hint
	 **/
	@ApiModelProperty(value = "")
	public String getHint() {
		return hint;
	}

	public void setHint(String hint) {
		this.hint = hint;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Placeholder placeholder = (Placeholder) o;
		return Objects.equals(this.$type, placeholder.$type) &&
				Objects.equals(this.id, placeholder.id) &&
				Objects.equals(this.creationTimestamp, placeholder.creationTimestamp) &&
				Objects.equals(this.modificationTimestamp, placeholder.modificationTimestamp) &&
				Objects.equals(this.version, placeholder.version) &&
				Objects.equals(this.accountId, placeholder.accountId) &&
				Objects.equals(this.placeholderValues, placeholder.placeholderValues) &&
				Objects.equals(this.cannedResponseId, placeholder.cannedResponseId) &&
				Objects.equals(this.type, placeholder.type) &&
				Objects.equals(this.title, placeholder.title) &&
				Objects.equals(this.hint, placeholder.hint);
	}

	@Override
	public int hashCode() {
		return Objects.hash($type, id, creationTimestamp, modificationTimestamp, version, accountId, placeholderValues, cannedResponseId, type, title, hint);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Placeholder {\n");
		sb.append("    $type: ").append(toIndentedString($type)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
		sb.append("    modificationTimestamp: ").append(toIndentedString(modificationTimestamp)).append("\n");
		sb.append("    version: ").append(toIndentedString(version)).append("\n");
		sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
		sb.append("    placeholderValues: ").append(toIndentedString(placeholderValues)).append("\n");
		sb.append("    cannedResponseId: ").append(toIndentedString(cannedResponseId)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    hint: ").append(toIndentedString(hint)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
